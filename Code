PROGRAM TWO_DIMENTIONAL

INTEGER :: NNODE, NCONS, NPLOAD, NSLOAD, NBLOAD, NMAT, NDOF
REAL , ALLOCATABLE :: NODE_DATA(:,:) , ELE_DATA(:,:) , CONS_DATA(:) ,DIMEN_DATA(:,:), NODESXY(:,:),k(:,:),KGLOBAL(:,:),RVEC(:,:),NOE (:,:),VOP(:,:),REALXY(:,:)
REAL , ALLOCATABLE :: PLOAD_DATA(:,:) , SLOAD_DATA(:,:) , BLOAD_DATA(:,:),RVS(:,:),PLOADDATA(:,:),RVSG(:,:),KGLOBAL_D(:,:)!,A(:,:),B(:,:)
REAL , ALLOCATABLE :: MAT_DATA(:,:),RVSGD(:,:)
INTEGER, ALLOCATABLE :: DOF_LOC(:)


real::L2,L22,i1,i2,L1,L11,nnnn,tttt,h,p,o1,o2,VOP1,L111,x,L222,L111
INTEGER::q,q1,QD,QN

CALL DIMEN
CALL NODES         
CALL K_CAL
CALL READ_LOAD
CALL SOLVE(KGLOBAL_D,QD,QD,RVSGD,1,1)
OPEN(14,File='javab')
WRITE (14,*) RVSGD

CONTAINS




!.....................................................sub1
!Determination of Dimenstion
SUBROUTINE DIMEN
OPEN(1,FILE='DIMEN.TXT')        !20

P1=(0,0)
READ(1,*) L1	
READ(1,*) z11
READ(1,*) L2
READ(1,*) z22

Z1=(z11)*(3.14/180)
Z2=z22*(3.14/180)
X1=0                           
Y1=0   
X2=L1*cos(Z1)
Y2=L1*sin(Z1)
X3=X2+L2*cos(Z2)
Y3=Y2+L2*sin(Z2)
X4=X3+L2*cos(Z2)
Y4=Y3-L2*sin(Z2)
X5=X4+L1*cos(Z1)
Y5=Y4-L1*sin(Z1)

ALLOCATE(DIMEN_DATA(3,5)) !1:NODE NUMBER, 2:X COORDINATE 3: y coordinate

  
 DIMEN_DATA(1,1)=1
  DIMEN_DATA(2,1)=X1
   DIMEN_DATA(3,1)=Y1
   DIMEN_DATA(1,2)=2
    DIMEN_DATA(2,2)=X2
     DIMEN_DATA(3,2)=Y2
DIMEN_DATA(1,3)=3                !50
  DIMEN_DATA(2,3)=X3
   DIMEN_DATA(3,3)=Y3
   DIMEN_DATA(1,4)=4
  DIMEN_DATA(2,4)=X4
   DIMEN_DATA(3,4)=Y4
   DIMEN_DATA(1,5)=5
  DIMEN_DATA(2,5)=X5
   DIMEN_DATA(3,5)=Y5
   
!WRITE(*,*) DIMEN_DATA               !60
CLOSE(1)
END SUBROUTINE DIMEN



!..................................................sub2
SUBROUTINE NODES
OPEN(1,FILE='NODES.TXT')

                                    !70
READ(1,*) 	
READ(1,*) nn1 !number of nodes for first main elemnts
READ(1,*) 
READ(1,*) nn2  !number of nodea for second main elemnt



NNN=nn1+nn2
NN=NNN+nn2
!ALLOCATE( NODESXY(2*(nn1+nn2),5))  !1:NODE NUMBER, 2:X COORDINATE 3: y coordinate                 80
ALLOCATE( NODESXY (3,nn1+nn2+nn2+nn1) )!1:NODE NUMBER, 2:X COORDINATE 3: y coordinate
DO I=1,nn1
  
  NODESXY(1,I)=I 
   NODESXY(2,I)=(I-1)*(DIMEN_DATA(2,2)/((nn1)-1))
    NODESXY(3,I)=(I-1)*(DIMEN_DATA(3,2)/((nn1)-1))
END DO

DO I=1,nn2
                                                          !90
  NODESXY(1,I+(nn1))=I +(nn1)
   NODESXY(2,I+(nn1))=(I-1)*((DIMEN_DATA(2,3)-DIMEN_DATA(2,2))/((nn2)-1))+(DIMEN_DATA(2,2))
    NODESXY(3,I+(nn1))=(I-1)*((DIMEN_DATA(3,3)-DIMEN_DATA(3,2))/((nn2)-1))+(DIMEN_DATA(3,2))
END DO
DO I=1,nn2
  
  NODESXY(1,I+(NNN))=I+(NNN) 
   NODESXY(2,I+(NNN))=(I-1)*((DIMEN_DATA(2,4)-DIMEN_DATA(2,3))/((nn2)-1))+(DIMEN_DATA(2,3))
    NODESXY(3,I+(NNN))=(I-1)*((DIMEN_DATA(3,4)-DIMEN_DATA(3,3))/((nn2)-1))+(DIMEN_DATA(3,3))
END DO

DO I=1,nn1

  NODESXY(1,I+(NN))=I+NN 
   NODESXY(2,I+(NN))=(I-1)*((DIMEN_DATA(2,5)-DIMEN_DATA(2,4))/((nn1)-1))+(DIMEN_DATA(2,4))
    NODESXY(3,I+(NN))=(I-1)*((DIMEN_DATA(3,5)-DIMEN_DATA(3,4))/((nn1)-1))+(DIMEN_DATA(3,4))
END DO

OPEN(4,File='NOD')
WRITE (4,*)  NODESXY


!WRITE(*,*)  NODESXY

CLOSE (1)
END SUBROUTINE NODES

!...................................................sub3
SUBROUTINE K_CAL





OPEN(1,FILE='DIMEN.TXT')        !20

P1=(0,0)
READ(1,*) L11	
READ(1,*) z11
READ(1,*) L22
READ(1,*) z22
OPEN(1,FILE='MATERIAL.TXT')

                                    
READ(1,*) E1 	
READ(1,*) A1 
READ(1,*) i1
READ(1,*) E2 
READ(1,*) A2
READ(1,*) i2

OPEN(1,FILE='NODES.TXT')

                                    !70
READ(1,*) 	
READ(1,*) nn1 !number of nodes for first main elemnts
READ(1,*) 
READ(1,*) nn2  !number of nodea for second main elemnt


ALLOCATE(k (6*((nn1)+(nn2)+(nn2)+(nn1)-4),6))

                      !k for each element of first main
p=((DIMEN_DATA(2,2))-(DIMEN_DATA(2,1)))/L11       !l
if (p<0.01) p=0
h=(DIMEN_DATA(3,2)-DIMEN_DATA(3,1))/L11    !m
if (h<0.01) h=0
L1=(L11/(nn1-1))

DO I=1,((nn1)-1) 

  k((6*(I-1)+1),1)=  ((E1*A1*(p**2))/L1)+((12*E1*i1*(h**2))/(L1**3))
  k((6*(I-1)+1),2)=  ((E1*A1*p*h)/L1)-((12*E1*i1*p*h)/(L1**3))
  k((6*(I-1)+1),3)= -(6*E1*i1*h)/(L1**2)
  k((6*(I-1)+1),4)= -((E1*A1*(p**2))/L1) - ((12*E1*i1*(h**2))/(L1**3))
  k((6*(I-1)+1),5)=  ((12*E1*i1*p*h)/(L1**3)) - ((E1*A1*p*h)/L1)
  k((6*(I-1)+1),6)= -((6*E1*i1*h)/(L1**2))
    
  k((6*(I-1)+2),1)=  ((E1*A1*p*h)/L1) - ((12*E1*i1*p*h)/(L1**3))
  k((6*(I-1)+2),2)=  ((12*E1*i1*(p**2))/(L1**3)) + ((E1*A1*(h**2))/(L1))
  k((6*(I-1)+2),3)=  (6*E1*i1*p)/(L1**2)
  k((6*(I-1)+2),4)=  (12*E1*i1*p*h)/(L1**3) - ((E1*A1*p*h)/(L1))
  k((6*(I-1)+2),5)= -((12*E1*i1*(p**2))/(L1**3)) - ((E1*A1*(h**2))/L1)
  k((6*(I-1)+2),6)=  (6*E1*i1*p)/(L1**2)

  k((6*(I-1)+3),1)= -(6*E1*i1*h)/(L1**2)
  k((6*(I-1)+3),2)=  (6*E1*i1*p)/(L1**2)
  k((6*(I-1)+3),3)=  (4*E1*i1)/(L1)
  k((6*(I-1)+3),4)=  (6*E1*i1*h)/(L1**2)
  k((6*(I-1)+3),5)= -(6*E1*i1*p)/(L1**2)
  k((6*(I-1)+3),6)=  (2*E1*i1)/(L1)

  k((6*(I-1)+4),1)= -((E1*A1*(p**2))/L1)-((12*E1*i1*(h**2))/(L1**3))
  k((6*(I-1)+4),2)= -((E1*A1*p*h)/L1)+((12*E1*i1*p*h)/(L1**3))
  k((6*(I-1)+4),3)=  ((6*E1*i1*h)/(L1**2))
  k((6*(I-1)+4),4)=  ((E1*A1*(p**2))/L1)+((12*E1*i1*(h**2))/(L1**3))
  k((6*(I-1)+4),5)=  ((E1*A1*p*h)/L1)-((12*E1*i1*p*h)/(L1**3))
  k((6*(I-1)+4),6)=  ((6*E1*i1*h)/(L1**2))



  k((6*(I-1)+5),1)=  (12*E1*i1*p*h)/(L1**3) - ((E1*A1*p*h)/(L1))
  k((6*(I-1)+5),2)= -((12*E1*i1*(p**2))/(L1**3)) - ((E1*A1*(h**2))/(L1))
  k((6*(I-1)+5),3)= -(6*E1*i1*p)/(L1**2)
  k((6*(I-1)+5),4)=  ((E1*A1*p*h)/L1) - ((12*E1*i1*p*h)/(L1**3))
  k((6*(I-1)+5),5)=  ((12*E1*i1*(p**2))/(L1**3)) + ((E1*A1*(h**2))/(L1))
  k((6*(I-1)+5),6)= -(6*E1*i1*p)/(L1**2)

  k((6*(I-1)+6),1)= -(6*E1*i1*h)/(L1**2)
  k((6*(I-1)+6),2)=  (6*E1*i1*p)/(L1**2)
  k((6*(I-1)+6),3)=  (2*E1*i1)/(L1)
  k((6*(I-1)+6),4)=  (6*E1*i1*h)/(L1**2)
  k((6*(I-1)+6),5)= -(6*E1*i1*p)/(L1**2)
  k((6*(I-1)+6),6)=  (4*E1*i1)/(L1)

END DO
DO I=(nn1),((nn1)+(nn2)-2)                      !k for each element of second main
 
p=(DIMEN_DATA(2,3)-DIMEN_DATA(2,2))/L22
if (p<0.01) p=0
h=(DIMEN_DATA(3,3)-DIMEN_DATA(3,2))/L22
if (h<0.01) h=0
 

L2=(L22/(nn2-1))

  k((6*(I-1)+1),1)=  ((E2*A2*(p**2))/L2)+((12*E2*i2*(h**2))/(L2**3))
  k((6*(I-1)+1),2)=  ((E2*A2*p*h)/L2)-((12*E2*i2*p*h)/(L2**3))
  k((6*(I-1)+1),3)= -(6*E2*i2*h)/(L2**2)
  k((6*(I-1)+1),4)= -((E2*A2*(p**2))/L2) - ((12*E2*i2*(h**2))/(L2**3))
  k((6*(I-1)+1),5)=  ((12*E2*i2*p*h)/(L2**3)) - ((E2*A2*p*h)/L2)
  k((6*(I-1)+1),6)= -((6*E2*i2*h)/(L2**2))
    
  k((6*(I-1)+2),1)=  ((E2*A2*p*h)/L2) - ((12*E2*i2*p*h)/(L2**3))
  k((6*(I-1)+2),2)=  ((12*E2*i2*(p**2))/(L2**3)) + ((E2*A2*(h**2))/(L2))
  k((6*(I-1)+2),3)=  (6*E2*i2*p)/(L2**2)
  k((6*(I-1)+2),4)=  (12*E2*i2*p*h)/(L2**3) - ((E2*A2*p*h)/(L2))
  k((6*(I-1)+2),5)= -((12*E2*i2*(p**2))/(L2**3)) - ((E2*A2*(h**2))/L2)
  k((6*(I-1)+2),6)=  (6*E2*i2*p)/(L2**2)

  k((6*(I-1)+3),1)= -(6*E2*i2*h)/(L2**2)
  k((6*(I-1)+3),2)=  (6*E2*i2*p)/(L2**2)
  k((6*(I-1)+3),3)=  (4*E2*i2)/(L2)
  k((6*(I-1)+3),4)=  (6*E2*i2*h)/(L2**2)
  k((6*(I-1)+3),5)= -(6*E2*i2*p)/(L2**2)
  k((6*(I-1)+3),6)=  (2*E2*i2)/(L2)

  k((6*(I-1)+4),1)= -((E2*A2*(p**2))/L2)-((12*E2*i2*(h**2))/(L2**3))
  k((6*(I-1)+4),2)= -((E2*A2*p*h)/L2)+((12*E2*i2*p*h)/(L2**3))
  k((6*(I-1)+4),3)=  ((6*E2*i2*h)/(L2**2))
  k((6*(I-1)+4),4)=  ((E2*A2*(p**2))/L2)+((12*E2*i2*(h**2))/(L2**3))
  k((6*(I-1)+4),5)=  ((E2*A2*p*h)/L2)-((12*E2*i2*p*h)/(L2**3))
  k((6*(I-1)+4),6)=  ((6*E2*i2*h)/(L2**2))



  k((6*(I-1)+5),1)=  (12*E2*i2*p*h)/(L2**3) - ((E2*A2*p*h)/(L2))
  k((6*(I-1)+5),2)= -((12*E2*i2*(p**2))/(L2**3)) - ((E2*A2*(h**2))/(L2))
  k((6*(I-1)+5),3)= -(6*E2*i2*p)/(L2**2)
  k((6*(I-1)+5),4)=  ((E2*A2*p*h)/L2) - ((12*E2*i2*p*h)/(L2**3))
  k((6*(I-1)+5),5)=  ((12*E2*i2*(p**2))/(L2**3)) + ((E2*A2*(h**2))/(L2))
  k((6*(I-1)+5),6)= -(6*E2*i2*p)/(L2**2)

  k((6*(I-1)+6),1)= -(6*E2*i2*h)/(L2**2)
  k((6*(I-1)+6),2)=  (6*E2*i2*p)/(L2**2)
  k((6*(I-1)+6),3)=  (2*E2*i2)/(L2)
  k((6*(I-1)+6),4)=  (6*E2*i2*h)/(L2**2)
  k((6*(I-1)+6),5)= -(6*E2*i2*p)/(L2**2)
  k((6*(I-1)+6),6)=  (4*E2*i2)/(L2)
END DO

DO I=((nn1)+(nn2)-1),((nn1)+(nn2)+(nn2)-3)                      !k for each element of third main
 
p=(DIMEN_DATA(2,4)-DIMEN_DATA(2,3))/L22
if (p<0.01) p=0 
h=(DIMEN_DATA(3,4)-DIMEN_DATA(3,3))/L22
!nnnn=ABS(h)
!if (nnnn<0.01) h=0

  k((6*(I-1)+1),1)=  ((E2*A2*(p**2))/L2)+((12*E2*i2*(h**2))/(L2**3))
  k((6*(I-1)+1),2)=  ((E2*A2*p*h)/L2)-((12*E2*i2*p*h)/(L2**3))
  k((6*(I-1)+1),3)= -(6*E2*i2*h)/(L2**2)
  k((6*(I-1)+1),4)= -((E2*A2*(p**2))/L2) - ((12*E2*i2*(h**2))/(L2**3))
  k((6*(I-1)+1),5)=  ((12*E2*i2*p*h)/(L2**3)) - ((E2*A2*p*h)/L2)
  k((6*(I-1)+1),6)= -((6*E2*i2*h)/(L2**2))
    
  k((6*(I-1)+2),1)=  ((E2*A2*p*h)/L2) - ((12*E2*i2*p*h)/(L2**3))
  k((6*(I-1)+2),2)=  ((12*E2*i2*(p**2))/(L2**3)) + ((E2*A2*(h**2))/(L2))
  k((6*(I-1)+2),3)=  (6*E2*i2*p)/(L2**2)
  k((6*(I-1)+2),4)=  (12*E2*i2*p*h)/(L2**3) - ((E2*A2*p*h)/(L2))
  k((6*(I-1)+2),5)= -((12*E2*i2*(p**2))/(L2**3)) - ((E2*A2*(h**2))/L2)
  k((6*(I-1)+2),6)=  (6*E2*i2*p)/(L2**2)

  k((6*(I-1)+3),1)= -(6*E2*i2*h)/(L2**2)
  k((6*(I-1)+3),2)=  (6*E2*i2*p)/(L2**2)
  k((6*(I-1)+3),3)=  (4*E2*i2)/(L2)
  k((6*(I-1)+3),4)=  (6*E2*i2*h)/(L2**2)
  k((6*(I-1)+3),5)= -(6*E2*i2*p)/(L2**2)
  k((6*(I-1)+3),6)=  (2*E2*i2)/(L2)

  k((6*(I-1)+4),1)= -((E2*A2*(p**2))/L2)-((12*E2*i2*(h**2))/(L2**3))
  k((6*(I-1)+4),2)= -((E2*A2*p*h)/L2)+((12*E2*i2*p*h)/(L2**3))
  k((6*(I-1)+4),3)=  ((6*E2*i2*h)/(L2**2))
  k((6*(I-1)+4),4)=  ((E2*A2*(p**2))/L2)+((12*E2*i2*(h**2))/(L2**3))
  k((6*(I-1)+4),5)=  ((E2*A2*p*h)/L2)-((12*E2*i2*p*h)/(L2**3))
  k((6*(I-1)+4),6)=  ((6*E2*i2*h)/(L2**2))



  k((6*(I-1)+5),1)=  (12*E2*i2*p*h)/(L2**3) - ((E2*A2*p*h)/(L2))
  k((6*(I-1)+5),2)= -((12*E2*i2*(p**2))/(L2**3)) - ((E2*A2*(h**2))/(L2))
  k((6*(I-1)+5),3)= -(6*E2*i2*p)/(L2**2)
  k((6*(I-1)+5),4)=  ((E2*A2*p*h)/L2) - ((12*E2*i2*p*h)/(L2**3))
  k((6*(I-1)+5),5)=  ((12*E2*i2*(p**2))/(L2**3)) + ((E2*A2*(h**2))/(L2))
  k((6*(I-1)+5),6)= -(6*E2*i2*p)/(L2**2)

  k((6*(I-1)+6),1)= -(6*E2*i2*h)/(L2**2)
  k((6*(I-1)+6),2)=  (6*E2*i2*p)/(L2**2)
  k((6*(I-1)+6),3)=  (2*E2*i2)/(L2)
  k((6*(I-1)+6),4)=  (6*E2*i2*h)/(L2**2)
  k((6*(I-1)+6),5)= -(6*E2*i2*p)/(L2**2)
  k((6*(I-1)+6),6)=  (4*E2*i2)/(L2)

END DO
DO I=((nn1)+(nn2)+(nn2)-2),((nn1)+(nn2)+(nn2)+(nn1)-4)                      !k for each element of fourth main
  
p=(DIMEN_DATA(2,5)-DIMEN_DATA(2,4))/L11
if (p<0.01) p=0 
h=(DIMEN_DATA(3,5)-DIMEN_DATA(3,4))/L11
!tttt=ABS(h)
!if (tttt<0.01) h=0
!WRITE (*,*) h
!WRITE (*,*)DIMEN_DATA(3,5)
!WRITE (*,*)DIMEN_DATA(3,4)

k((6*(I-1)+1),1)=  ((E1*A1*(p**2))/L1)+((12*E1*i1*(h**2))/(L1**3))
  k((6*(I-1)+1),2)=  ((E1*A1*p*h)/L1)-((12*E1*i1*p*h)/(L1**3))
  k((6*(I-1)+1),3)= -(6*E1*i1*h)/(L1**2)
  k((6*(I-1)+1),4)= -((E1*A1*(p**2))/L1) - ((12*E1*i1*(h**2))/(L1**3))
  k((6*(I-1)+1),5)=  ((12*E1*i1*p*h)/(L1**3)) - ((E1*A1*p*h)/L1)
  k((6*(I-1)+1),6)= -((6*E1*i1*h)/(L1**2))
    
  k((6*(I-1)+2),1)=  ((E1*A1*p*h)/L1) - ((12*E1*i1*p*h)/(L1**3))
  k((6*(I-1)+2),2)=  ((12*E1*i1*(p**2))/(L1**3)) + ((E1*A1*(h**2))/(L1))
  k((6*(I-1)+2),3)=  (6*E1*i1*p)/(L1**2)
  k((6*(I-1)+2),4)=  (12*E1*i1*p*h)/(L1**3) - ((E1*A1*p*h)/(L1))
  k((6*(I-1)+2),5)= -((12*E1*i1*(p**2))/(L1**3)) - ((E1*A1*(h**2))/L1)
  k((6*(I-1)+2),6)=  (6*E1*i1*p)/(L1**2)

  k((6*(I-1)+3),1)= -(6*E1*i1*h)/(L1**2)
  k((6*(I-1)+3),2)=  (6*E1*i1*p)/(L1**2)
  k((6*(I-1)+3),3)=  (4*E1*i1)/(L1)
  k((6*(I-1)+3),4)=  (6*E1*i1*h)/(L1**2)
  k((6*(I-1)+3),5)= -(6*E1*i1*p)/(L1**2)
  k((6*(I-1)+3),6)=  (2*E1*i1)/(L1)

  k((6*(I-1)+4),1)= -((E1*A1*(p**2))/L1)-((12*E1*i1*(h**2))/(L1**3))
  k((6*(I-1)+4),2)= -((E1*A1*p*h)/L1)+((12*E1*i1*p*h)/(L1**3))
  k((6*(I-1)+4),3)=  ((6*E1*i1*h)/(L1**2))
  k((6*(I-1)+4),4)=  ((E1*A1*(p**2))/L1)+((12*E1*i1*(h**2))/(L1**3))
  k((6*(I-1)+4),5)=  ((E1*A1*p*h)/L1)-((12*E1*i1*p*h)/(L1**3))
  k((6*(I-1)+4),6)=  ((6*E1*i1*h)/(L1**2))



  k((6*(I-1)+5),1)=  (12*E1*i1*p*h)/(L1**3) - ((E1*A1*p*h)/(L1))
  k((6*(I-1)+5),2)= -((12*E1*i1*(p**2))/(L1**3)) - ((E1*A1*(h**2))/(L1))
  k((6*(I-1)+5),3)= -(6*E1*i1*p)/(L1**2)
  k((6*(I-1)+5),4)=  ((E1*A1*p*h)/L1) - ((12*E1*i1*p*h)/(L1**3))
  k((6*(I-1)+5),5)=  ((12*E1*i1*(p**2))/(L1**3)) + ((E1*A1*(h**2))/(L1))
  k((6*(I-1)+5),6)= -(6*E1*i1*p)/(L1**2)

  k((6*(I-1)+6),1)= -(6*E1*i1*h)/(L1**2)
  k((6*(I-1)+6),2)=  (6*E1*i1*p)/(L1**2)
  k((6*(I-1)+6),3)=  (2*E1*i1)/(L1)
  k((6*(I-1)+6),4)=  (6*E1*i1*h)/(L1**2)
  k((6*(I-1)+6),5)= -(6*E1*i1*p)/(L1**2)
  k((6*(I-1)+6),6)=  (4*E1*i1)/(L1)
  END Do
  OPEN(3,File='K1')
WRITE (3,*) k


ALLOCATE(KGLOBAL(6+(3*(nn2+nn2+nn1+nn1-5)),6+(3*(nn2+nn2+nn1+nn1-5))))
!ALLOCATE(KGLOBAL(33,33))
DO ii=1,(    6+(3*(nn2+nn2+nn1+nn1-5)))
  DO i=1,(    6+(3*(nn2+nn2+nn1+nn1-5)))
    KGLOBAL(i,ii)=0
END DO
END DO





  !WRITE (*,*) KGLOBAL
  !WRITE (*,*) KGLOBAL(1,1)
!WRITE (*,*) KGLOBAL(1,2)
!WRITE (*,*) KGLOBAL(2,1)


z=nn1+nn1+nn2+nn2-4
 ii=1 !change .................................................... baraye ijad KGLOBAL
DO i=1,6
KGLOBAL(3*(ii-1)+i,3*(ii-1)+1)=k(6*(ii-1)+i,1)
KGLOBAL(3*(ii-1)+i,3*(ii-1)+2)=k(6*(ii-1)+i,2)
KGLOBAL(3*(ii-1)+i,3*(ii-1)+3)=k(6*(ii-1)+i,3)
END DO
DO i=1,3
KGLOBAL(3*(ii-1)+i,3*(ii-1)+4)=k(6*(ii-1)+i,4)
KGLOBAL(3*(ii-1)+i,3*(ii-1)+5)=k(6*(ii-1)+i,5)
KGLOBAL(3*(ii-1)+i,3*(ii-1)+6)=k(6*(ii-1)+i,6)
END DO

   
 DO ii=2,z
   DO i=1,6
KGLOBAL(3*(ii-1)+i,3*(ii-1)+1)=k(6*(ii-1)+i,1)
KGLOBAL(3*(ii-1)+i,3*(ii-1)+2)=k(6*(ii-1)+i,2)
KGLOBAL(3*(ii-1)+i,3*(ii-1)+3)=k(6*(ii-1)+i,3)
END DO
!WRITE (*,*) k(9,1)
!WRITE (*,*) k(6,4)

  DO i=1,3
KGLOBAL(3*(ii-1)+i,3*(ii-1)+1)=KGLOBAL(3*(ii-1)+i,3*(ii-1)+1)+k(6*(ii-1)+i-3,1+3)
KGLOBAL(3*(ii-1)+i,3*(ii-1)+2)=KGLOBAL(3*(ii-1)+i,3*(ii-1)+2)+ k(6*(ii-1)+i-3,2+3)
KGLOBAL(3*(ii-1)+i,3*(ii-1)+3)=KGLOBAL(3*(ii-1)+i,3*(ii-1)+3) +k(6*(ii-1)+i-3,3+3)
END DO  
!WRITE (*,*) KGLOBAL(6,4)
DO i=1,3
KGLOBAL(3*(ii-1)+i,3*(ii-1)+4)=k(6*(ii-1)+i,4)
KGLOBAL(3*(ii-1)+i,3*(ii-1)+5)=k(6*(ii-1)+i,5)
KGLOBAL(3*(ii-1)+i,3*(ii-1)+6)=k(6*(ii-1)+i,6)
END DO

END DO




!................................change
j=z
DO i=4,6
KGLOBAL(3*(j-1)+i,3*(j-1)+4)=k(6*(j-1)+i,4)
KGLOBAL(3*(j-1)+i,3*(j-1)+5)=k(6*(j-1)+i,5)
KGLOBAL(3*(j-1)+i,3*(j-1)+6)=k(6*(j-1)+i,6)
END DO 

!WRITE (*,*) KGLOBAL
!WRITE (*,*) KGLOBAL(1,1)
!WRITE (*,*) KGLOBAL(1,2)
!WRITE (*,*) KGLOBAL(2,1)

OPEN(2,File='K')    ! zakhire KGLOBAL
WRITE (2,*) KGLOBAL





END SUBROUTINE K_CAL

!...........................................sub 4


SUBROUTINE READ_LOAD


OPEN(1,FILE='SLOAD.TXT')
  
OPEN(8,FILE='NODES.TXT')

                                    !70
READ(8,*) 	
READ(8,*) nn1 !number of nodes for first main elemnts
READ(8,*) 
READ(8,*) nn2  !number of nodea for second main elemnt

ALLOCATE (RVS(1,(6+(3*(nn2+nn2+nn1+nn1-5)))))

DO i=1,(6+(3*(nn2+nn2+nn1+nn1-5)))
  RVS(1,i)=0
  END DO

READ(1,*) NSL           !tedad s load ha
!WRITE(*,*) '4', NSL

if (NSL==0) goto 20

 READ(1,*)NOE1  !shomare eleman
READ(1,*) VOP1   ! meghdar p
  
if (NSL==1) goto 10 
  
 READ(1,*)NOE2  !shomare eleman
READ(1,*) VOP2  ! meghdar p
  if (NSL==2) goto 10 
 READ(1,*)NOE3  !shomare eleman
READ(1,*) VOP3  ! meghdar p 
if (NSL==3) goto 10 
 READ(1,*)NOE4  !shomare eleman
READ(1,*) VOP4  ! meghdar p 
if (NSL==4) goto 10 
  
10 WRITE (*,*) NOE1



  
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 1omin s load

L111=  SQRT(  ((NODESXY(2,NOE1+1)-NODESXY(2,NOE1))**2)   +((NODESXY(3,NOE1+1)-NODESXY(3,NOE1))**2))   ! L111 for calculating length of each tiny elemnts
 if (L111==0) goto 30
g=(NODESXY(2,NOE1+1)-NODESXY(2,NOE1))/L111
 n=(NODESXY(3,NOE1+1)-NODESXY(3,NOE1))/L111
   
!OPEN(4,File='cheakn')
!WRITE (4,*) NODESXY
30 if (L111==0) then                     ! L111 for calculating length of each tiny elemnts in special condition that node is shared with Two main elemnts
 !if (L111==0) goto 30
   L111=SQRT(  ((NODESXY(2,NOE1+2)-NODESXY(2,NOE1))**2)   +((NODESXY(3,NOE1+2)-NODESXY(3,NOE1))**2))
 g=(NODESXY(2,NOE1+2)-NODESXY(2,NOE1))/L111
 n=(NODESXY(3,NOE1+2)-NODESXY(3,NOE1))/L111
   
   END if
  

RVS(1,3*(NOE1-1)+1)=0*g-((VOP1*L111   )/2)*n
RVS(1,3*(NOE1-1)+1+1)=((VOP1*L111   )/2)*g+0*n
RVS(1,3*(NOE1-1)+1+2)=(VOP1*  (L111**2) )/12

RVS(1,3*(NOE1-1)+1+3)=0*g-((VOP1*L111   )/2)*n
RVS(1,3*(NOE1-1)+1+4)=((VOP1*L111   )/2)*g+0*n
RVS(1,3*(NOE1-1)+1+5)=-(VOP1*  (L111**2) )/12
if (NSL==1) goto 20 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!2vomin s load

L222=  SQRT(  ((NODESXY(2,NOE2+1)-NODESXY(2,NOE2))**2)   +((NODESXY(3,NOE2+1)-NODESXY(3,NOE2))**2)) 
 if (L222==0) goto 40
g=(NODESXY(2,NOE2+1)-NODESXY(2,NOE2))/L222
 n=(NODESXY(3,NOE2+1)-NODESXY(3,NOE2))/L222
 
40 if (L222==0) then
   L222=SQRT(  ((NODESXY(2,NOE2+2)-NODESXY(2,NOE2))**2)   +((NODESXY(3,NOE2+2)-NODESXY(3,NOE2))**2))
   
    g=(NODESXY(2,NOE1+2)-NODESXY(2,NOE1))/L222
 n=(NODESXY(3,NOE1+2)-NODESXY(3,NOE1))/L222
 
   END if
   

RVS(1,3*(NOE2-1)+1)=0*g-((VOP2*L222   )/2)*n   

     if (NOE2==NOE1+1) then
RVS(1,3*(NOE2-1)+1+1)=  (((VOP2*L222   )/2)*g+0*n)+  RVS(1,3*(NOE1-1)+1+4) 

else
  RVS(1,3*(NOE2-1)+1+1)=((VOP2*L222   )/2)*g+0*n
END if  


 if (NOE2==NOE1+1) then
RVS(1,3*(NOE2-1)+1+2)=((VOP2*  (L222**2) )/12)+    (-(VOP1*  (L111**2) )/12)
  else
    RVS(1,3*(NOE2-1)+1+2)=(VOP2*  (L222**2) )/12
END if  



RVS(1,3*(NOE2-1)+1+3)=0*g-((VOP2*L222   )/2)*n
RVS(1,3*(NOE2-1)+1+4)=((VOP2*L222   )/2)*g+0*n
RVS(1,3*(NOE2-1)+1+5)=-(VOP2*  (L222**2) )/12
if (NSL==2) goto 20





!!!!!!!!!!!!!!!!!!!!!!!11  3vomin s load
  
L333=  SQRT(  ((NODESXY(2,NOE3+1)-NODESXY(2,NOE3))**2)   +((NODESXY(3,NOE3+1)-NODESXY(3,NOE3))**2))
if (L333==0) goto 50
g=(NODESXY(2,NOE3+1)-NODESXY(2,NOE3))/L333
 n=(NODESXY(3,NOE3+1)-NODESXY(3,NOE3))/L333
 
50 if (L333==0) then
   L333=SQRT(  ((NODESXY(2,NOE3+2)-NODESXY(2,NOE3))**2)   +((NODESXY(3,NOE3+2)-NODESXY(3,NOE3))**2))
    g=(NODESXY(2,NOE3+2)-NODESXY(2,NOE3))/L333
 n=(NODESXY(3,NOE3+2)-NODESXY(3,NOE3))/L333
   END if 

   RVS(1,3*(NOE3-1)+1)=0*g-((VOP3*L333   )/2)*n   

     if (NOE3==NOE2+1) then
RVS(1,3*(NOE3-1)+1+1)=(((VOP3*L333   )/2)*g+0*n)+    RVS(1,3*(NOE2-1)+1+4)
else 
  RVS(1,3*(NOE3-1)+1+1)=((VOP3*L333   )/2)*g+0*n
END if  



 if (NOE3==NOE2+1) then
RVS(1,3*(NOE3-1)+1+2)=((VOP3*  (L333**2) )/12)+    (-(VOP2*  (L222**2) )/12)
  else
    RVS(1,3*(NOE2-1)+1+2)=(VOP3*  (L333**2) )/12
END if  


RVS(1,3*(NOE3-1)+1+3)=0*g-((VOP3*L333   )/2)*n
RVS(1,3*(NOE3-1)+1+4)=((VOP3*L333   )/2)*g+0*n
RVS(1,3*(NOE3-1)+1+5)=-(VOP3*  (L333**2) )/12
if (NSL==2) goto 20











  20 write(*,*)
  
  ALLOCATE (RVSG(1,(6+(3*(nn2+nn2+nn1+nn1-5)))))
DO i=1,(6+(3*(nn2+nn2+nn1+nn1-5))) 
  RVSG(1,i)=RVS(1,i)

END DO
  

  OPEN(5,File='RVS')
WRITE (5,*) RVS


  
 OPEN(6,FILE='PLOAD.TXT')              ! Pload
READ (6,*)  x
ALLOCATE (PLOADDATA(1,3*x))

DO i=1,3*x
                                    
READ(6,*) PLOADDATA(1,i) 	

END DO

if (x==0) goto 60
 q=PLOADDATA(1,1)
 q1=PLOADDATA(1,2)
 q2=PLOADDATA(1,3)

RVSG(1,(3*(q-1))+1)=RVS(1,(3*(q-1))+1)+q1
RVSG(1,(3*(q-1))+2)=RVS(1,(3*(q-1))+2)+q2
if (x==1) goto 60
  q=PLOADDATA(1,4)
 q1=PLOADDATA(1,5)
 q2=PLOADDATA(1,6)
 
RVSG(1,(3*(q-1))+1)=RVS(1,(3*(q-1))+1)+q1

RVSG(1,(3*(q-1))+2)=RVS(1,(3*(q-1))+2)+q2 
if (x==2) goto 60
q=PLOADDATA(1,7)
 q1=PLOADDATA(1,8)
 q2=PLOADDATA(1,9)

RVSG(1,(3*(q-1))+1)=RVS(1,(3*(q-1))+1)+q1
RVSG(1,(3*(q-1))+2)=RVS(1,(3*(q-1))+2)+q2 



60 WRITE (*,*)
!....................................................constraint


! daryafte sharayete marzi
OPEN(8,FILE='CONSTRAINT.TXT')          
READ (8,*)  C1
READ (8,*)  C2
READ (8,*)  C3
READ (8,*)  C4
READ (8,*)  C5
READ (8,*)  C6
 
RVSG(1,1)=RVSG(1,1)*C1
RVSG(1,2)=RVSG(1,2)*C2
RVSG(1,3)=RVSG(1,3)*C3
RVSG(1,(6+(3*(nn2+nn2+nn1+nn1-5))-2))=RVSG(1,(6+(3*(nn2+nn2+nn1+nn1-5))-3))*C4
RVSG(1,(6+(3*(nn2+nn2+nn1+nn1-5))-1))=RVSG(1,(6+(3*(nn2+nn2+nn1+nn1-5))-2))*C5
RVSG(1,(6+(3*(nn2+nn2+nn1+nn1-5))))=RVSG(1,(6+(3*(nn2+nn2+nn1+nn1-5))-1))*C6

QN=(6+(3*(nn2+nn2+nn1+nn1-5)))
QD=(6+(3*(nn2+nn2+nn1+nn1-5)))+((C1-1)+(C2-1)+(C3-1)+(C4-1)+(C5-1)+(C6-1));
! emal sharayete marzi
  DO j=1,(6+(3*(nn2+nn2+nn1+nn1-5)))
KGLOBAL (    1         ,j)=KGLOBAL (    1         ,j)*C1
KGLOBAL (    2         ,j)=KGLOBAL (    2         ,j)*C2
KGLOBAL (    3         ,j)=KGLOBAL (    3         ,j)*C3
END DO
DO j=1,(6+(3*(nn2+nn2+nn1+nn1-5)))
KGLOBAL (    j         ,1)=KGLOBAL (    j         ,1)*C1
KGLOBAL (    j         ,2)=KGLOBAL (    j         ,2)*C2
KGLOBAL (    j         ,3)=KGLOBAL (    j         ,3)*C3
END DO
DO j=1,(6+(3*(nn2+nn2+nn1+nn1-5)))
KGLOBAL (    (6+(3*(nn2+nn2+nn1+nn1-5)))         ,j)=KGLOBAL (    (6+(3*(nn2+nn2+nn1+nn1-5)))           ,j)*C6
KGLOBAL (    (6+(3*(nn2+nn2+nn1+nn1-5))-1)       ,j)=KGLOBAL (    (6+(3*(nn2+nn2+nn1+nn1-5))-1)         ,j)*C5
KGLOBAL (    (6+(3*(nn2+nn2+nn1+nn1-5))-2)       ,j)=KGLOBAL (    (6+(3*(nn2+nn2+nn1+nn1-5))-2)         ,j)*C4
END DO
DO j=1,(6+(3*(nn2+nn2+nn1+nn1-5)))
KGLOBAL (          j   ,(6+(3*(nn2+nn2+nn1+nn1-5))) )=KGLOBAL (          j   ,(6+(3*(nn2+nn2+nn1+nn1-5))))*C6
KGLOBAL (           j   ,(6+(3*(nn2+nn2+nn1+nn1-5))-1))=KGLOBAL (          j   ,(6+(3*(nn2+nn2+nn1+nn1-5))-1))*C5
KGLOBAL (           j  ,(6+(3*(nn2+nn2+nn1+nn1-5))-2))=KGLOBAL (         j    ,(6+(3*(nn2+nn2+nn1+nn1-5))-2))*C4
END DO
OPEN(4,File='KGLOBAL')
WRITE (4,*) KGLOBAL
OPEN(5,File='RVSG')
WRITE (5,*) RVSG
!hazf satr o soton (kahesh abad matris haye K va F :
!...............................................................K

if (C1==0.and. C2==0.and. C3==0.and. C4==0.and. C5==0.and. C6==0) then  !age avalin va dovomin tekiegah Gir dar bod 
  ALLOCATE (KGLOBAL_D   ((6+(3*(nn2+nn2+nn1+nn1-5))-6),(6+(3*(nn2+nn2+nn1+nn1-5))-6)))                
DO i=1,(6+(3*(nn2+nn2+nn1+nn1-5))-6) 
  DO j= 1,(6+(3*(nn2+nn2+nn1+nn1-5))-6)
  KGLOBAL_D(j,i)=KGLOBAL(j+3,i+3)
END DO
END DO
OPEN(13,File='KGLOBAL_D')
WRITE (13,*) KGLOBAL_D
  END if



if (C1==0.and. C2==0.and. C3/=0.and. C4==0.and. C5==0.and. C6/=0) then  !age avalin va dovomin tekiegah mafsale sabet bod 
  ALLOCATE (KGLOBAL_D   ((6+(3*(nn2+nn2+nn1+nn1-5))-4),(6+(3*(nn2+nn2+nn1+nn1-5))-4)))                
DO i=1,(6+(3*(nn2+nn2+nn1+nn1-5))-4)-1
  DO j= 1,(6+(3*(nn2+nn2+nn1+nn1-5))-4)-1
  KGLOBAL_D(j,i)=KGLOBAL(j+2,i+2)
END DO
END DO
DO i=1,(6+(3*(nn2+nn2+nn1+nn1-5))-4)-1
  DO j= (6+(3*(nn2+nn2+nn1+nn1-5))-4),(6+(3*(nn2+nn2+nn1+nn1-5))-4)
  KGLOBAL_D(j,i)=KGLOBAL(j+4,i+2)
END DO
END DO

DO i=   (6+(3*(nn2+nn2+nn1+nn1-5))-4),(6+(3*(nn2+nn2+nn1+nn1-5))-4)
  DO j=1,(6+(3*(nn2+nn2+nn1+nn1-5))-4)-1 
  KGLOBAL_D(j,i)=KGLOBAL(j+2,i+4)
END DO
END DO

KGLOBAL_D(QN-4,QN-4)=KGLOBAL(QN,QN)
OPEN(13,File='KGLOBAL_D')
WRITE (13,*) KGLOBAL_D
  END if

if (C1/=0.and. C2==0.and. C3/=0.and. C4/=0.and. C5==0.and. C6/=0) then  !age avalin o dovomin tekiegah mafsal moteharek bod
  ALLOCATE (KGLOBAL_D   ((6+(3*(nn2+nn2+nn1+nn1-5))-2),(6+(3*(nn2+nn2+nn1+nn1-5))-2)))   
  
KGLOBAL_D(1,1)=KGLOBAL(1,1)
do i=2,QN-3
KGLOBAL_D(i,1)=KGLOBAL(i+1,1)
end do
do i=QN -2,QN  -2
KGLOBAL_D(i,1)=KGLOBAL(i+2,1)
end do

do j=1,1               
  do i=2, QN           -3
KGLOBAL_D(j,i)=KGLOBAL(1,i+1)
end do
KGLOBAL_D(j,QD)=KGLOBAL(1,QD+2)
end do

do j=2,  QN   -3               
  do i=2,   QN         -3
KGLOBAL_D(j,i)=KGLOBAL(j+1,i+1)
end do
KGLOBAL_D(j,QD)=KGLOBAL(j+1,QD+2)
end do

do j=    QN -2,QN  -2               
  do i=2,   QN         -3
KGLOBAL_D(j,i)=KGLOBAL(j+2,i+1)
end do
KGLOBAL_D(j,QD)=KGLOBAL(j+2,QD+2)
end do


OPEN(13,File='KGLOBAL_D')
WRITE (13,*) KGLOBAL_D
  END if                                               

!.....................................................................F

if (C1==0.and. C2==0.and. C3==0.and. C4==0.and. C5==0.and. C6==0) then  !age avalin va dovomin tekiegah Gir dar bod
  ALLOCATE (RVSGD   (1,(6+(3*(nn2+nn2+nn1+nn1-5))-6)))                
DO i=1,(6+(3*(nn2+nn2+nn1+nn1-5))-6)    
 RVSGD(1,i)=RVSG(1,i+3)
END DO
  END if

  if (C1==0.and. C2==0.and. C3/=0.and. C4==0.and. C5==0.and. C6/=0)  then  !age avalin o dovomin tekiegah mafsal sabet bod
  ALLOCATE (RVSGD(1,(6+(3*(nn2+nn2+nn1+nn1-5))-4)))                
DO i=1,(6+(3*(nn2+nn2+nn1+nn1-5))-4)    
 RVSGD(1,i)=RVSG(1,i+2)
END DO
  END if
  
 if (C1/=0.and. C2==0.and. C3/=0.and. C4/=0.and. C5==0.and. C6/=0)  then  !age avalin o dovomin tekiegah mafsal moteharek bod
  ALLOCATE (RVSGD(1,(6+(3*(nn2+nn2+nn1+nn1-5))-2)))                
DO i=2,(6+(3*(nn2+nn2+nn1+nn1-5))-2)    
 RVSGD(1,1)=RVSG(1,1)
  RVSGD(1,i)=RVSG(1,i+1)
  if (i==(6+(3*(nn2+nn2+nn1+nn1-5))-2)) then
    RVSGD(1,i)=RVSG(1,i+2)
    end if 
END DO
  END if
  

OPEN(14,File='RVSGD')
WRITE (14,*) RVSGD


!QD=(6+(3*(nn2+nn2+nn1+nn1-5)))+((C1-1)+(C2-1)+(C3-1)+(C4-1)+(C5-1)+(C6-1));


END SUBROUTINE READ_LOAD




!************************************************
! GAUSS-JORDAN ELIMINATION ROUTINE
!************************************************

SUBROUTINE SOLVE(A,N,NP,B,M,MP)

IMPLICIT NONE

INTEGER, INTENT(IN) :: N,NP,M,MP

REAL, INTENT(INOUT) :: A(NP,NP)
REAL, INTENT(INOUT) :: B(NP,MP)

INTEGER NMAX
!PARAMETER (NMAX=1500)

INTEGER I,ICOL,IROW,J,K,L,LL

REAL*8 BIG,DUM,PIVINV

INTEGER, ALLOCATABLE :: INDXC(:),INDXR(:),IPIV(:)

!NMAX = 15000
NMAX = 1500000

ALLOCATE( INDXC(NMAX),INDXR(NMAX),IPIV(NMAX) )


DO J = 1,N

   IPIV(J) = 0

END DO

DO I = 1,N

   BIG = 0.

   DO J = 1,N

      IF ( IPIV(J) .NE. 1 ) THEN

	     DO K = 1,N

		    IF ( IPIV(K) == 0 ) THEN

                IF ( ABS( A(J,K) ) .GE. BIG ) THEN

				   BIG = ABS( A(J,K) )

				   IROW = J

				   ICOL = K

				END IF

			END IF

		 END DO

	  END IF

   END DO

   IPIV(ICOL) = IPIV(ICOL) + 1

   IF ( IROW .NE. ICOL ) THEN

       DO L = 1,N

          DUM = A(IROW,L)

	      A(IROW,L) = A(ICOL,L)

	      A(ICOL,L) = DUM

	   END DO

	   DO L = 1,M

	       DUM = B(IROW,L)

	       B(IROW,L) = B(ICOL,L)

	       B(ICOL,L) = DUM

	   END DO

   END IF

   INDXR(I) = IROW

   INDXC(I) = ICOL

   IF ( A(ICOL,ICOL) .EQ. 0. ) PAUSE 'SINGULAR MATRIX IN GAUSS-JORDAN'

   PIVINV = 1. / A(ICOL,ICOL)

   A(ICOL,ICOL) = 1.

   DO L = 1,N

      A(ICOL,L) = A(ICOL,L) * PIVINV

   END DO

   DO L = 1,M

      B(ICOL,L) = B(ICOL,L) * PIVINV

   END DO

   DO LL = 1,N

      IF ( LL .NE. ICOL ) THEN

          DUM = A(LL,ICOL)

	      A(LL,ICOL) = 0.

	      DO L = 1,N

	         A(LL,L) = A(LL,L) - A(ICOL,L) * DUM

		  END DO

	      DO L = 1,M

		     B(LL,L) = B(LL,L) - B(ICOL,L) * DUM

		  END DO

	  END IF

   END DO

END DO

DO L = N,1,-1

   IF ( INDXR(L) .NE. INDXC(L) ) THEN

       DO K = 1,N

	      DUM = A(K,INDXR(L))

		  A(K,INDXR(L)) = A(K,INDXC(L))

		  A(K,INDXC(L)) = DUM

	   END DO
   END IF
END DO
RETURN
END SUBROUTINE SOLVE
END PROGRAM TWO_DIMENTIONAL
